openapi: 3.0.3
info:
  title: Lobby API 
  description:
    Lobby for online games API in Swagger
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://0.0.0.0/index.php
tags:
  - name: user
    description: Operations about user
  - name: game
    description: Access to games list
paths:
  /user/register:
    post:
      tags:
        - user
      summary: Create user
      description: Create user after registration.
      operationId: registerUser
      requestBody:
        description: Add user to system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad request
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: Collect passworg and login and pass user.
      operationId: loginUser
      parameters:
        - name: login
          in: query
          description: The user name for login
          schema:
            type: string
        - name: pass
          in: query
          description: The password for login in clear text
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Creds'
            application/json:
              schema:
                $ref: '#/components/schemas/Creds'
        '400':
          description: invalid credentials
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: Closing session.
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/addscore:
    post:
      tags:
        - user
      summary: Add statistics to user profile
      description: Add scores and played games statistics.
      operationId: score2User
      parameters:
        - name: login
          in: query
          description: login 
          required: true
          schema:
            $ref: '#/components/schemas/Score'
        - name: score
          in: query
          required: true
          description: total score in game
          schema:
            $ref: '#/components/schemas/Score'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /user/getusers:
    post:
      tags:
        - user
      summary: Creates list of users from database
      description: This can only be done by admin.
      operationId: getUsers
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad request
        default:
          description: successful operation
  /user/{login}:
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by admin.
      operationId: deleteUser
      parameters:
        - name: login
          in: path
          description: login of user that needs to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation.
        '400':
          description: Invalid login supplied.
        '404':
          description: User not found.
    put:
      tags:
        - user
      summary: Changes user password.
      description: This can only be done by the logged in user.
      operationId: updpassUser
      parameters:
        - name: login
          in: path
          description: login 
          required: true
          schema:
            $ref: '#/components/schemas/Creds'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid login supplied
        '405':
          description: Validation exception
        '500':
          description: Password not matching rules
  /game/getgames:
    post:
      tags:
        - game
      summary: Creates list of gamess from database
      description: This can only be done by admin.
      operationId: getGames
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/Game'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          description: bad request
        default:
          description: successful operation
  /game/open:
    post:
      tags:
        - game
      summary: Opening the game
      description: Creates (opens) game and switches status to open.
      operationId: openGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        '405':
          description: Bad request
        '500':
          description: Server error
  /game/close:
    put:
      tags:
        - game
      summary: Closing the game
      description: Switches status to closed.
      operationId: closeGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        '405':
          description: Bad request
        '500':
          description: Server error
  /game/join:
    put:
      tags:
        - game
      summary: Joining the game
      description: Switches status to active.
      operationId: joinGame
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
          application/xml:
            schema:
              $ref: '#/components/schemas/Game'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Game'
        '405':
          description: Bad request
        '500':
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        role:
          type: integer
          format: int64
          description: 1 - player, 0 - admin
          example: 1
        nick:
          type: string
          example: GigaGamer01
        login:
          type: string
          example: Borya
        pass:
          type: string
          example: HASH
        score:
          type: integer
          format: int64
          example: 13
        games_played:
          type: integer
          format: int64
          example: 4
      xml:
        name: user
    Creds:
      type: object
      properties:
        login:
          type: string
          example: Borya
        pass:
          type: string
          example: HASH
      xml:
        name: creds
    Score:
      type: object
      properties:
        login:
          type: string
          example: Borya
        score:
          type: integer
          format: int64
          example: 13
        games_played:
          type: integer
          format: int64
          example: 4
      xml:
        name: score
    Game:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 6
        status:
          type: string
          description: active || opend || closed
          example: active
        initiator:
          type: string
          description: nickname of user who started game
          example: GigaGamer01
      xml:
        name: score